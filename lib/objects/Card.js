/*
	Spellcast

	Copyright (c) 2014 - 2021 CÃ©dric Ronvel

	The MIT License (MIT)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

"use strict" ;



/*
	A card.
*/



const BaseObject = require( './BaseObject.js' ) ;
const kungFig = require( 'kung-fig' ) ;
const copyData = require( '../copyData.js' ) ;

//const svgKit = require( 'svg-kit' ) ;

const log = require( 'logfella' ).global.use( 'spellcast' ) ;



var autoId = 0 ;



function Card( book , id , params ) {
	if ( ! params || typeof params !== 'object' ) {
		params = {} ;
	}
	else {
		// Clone params to avoid parts to be shared
		params = copyData.deep( params ) ;
	}

	if ( ! id ) { id = 'card_' + ( autoId ++ ) ; }

	BaseObject.call( this , book , id , params ) ;

	// The text describing the rules
	this.rule = params.rule || '' ;

	// The text describing the lore, some quote or whatever
	this.lore = params.lore || '' ;

	// If set, this is a Spellcast function ID to be called with that object as argument, to generate the card layout
	this.layout = params.layout || null ;

	// Here all the layout params should be stored, thing like background color, image, pictos, and so on
	this.layoutParams = params.layoutParams || {} ;

	// This will receive the Vector Graphic object, once generated by the
	this.vg = null ;
}

module.exports = Card ;

Card.prototype = Object.create( BaseObject.prototype ) ;
Card.prototype.constructor = Card ;
Card.prototype.__prototypeUID__ = 'spellcast/Card' ;
Card.prototype.__prototypeVersion__ = require( '../../package.json' ).version ;



Card.serializer = function( place ) {
	return { override: place } ;
} ;



Card.unserializeContext = true ;

Card.unserializer = function( context ) {
	var place = Object.create( Card.prototype ) ;
	Object.defineProperty( place , 'book' , { value: context.book } ) ;
	//log.error( "Card.unserializer: %I" , context ) ;
	return place ;
} ;

