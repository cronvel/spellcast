
'scopeName': 'source.kfg'
'name': 'KFG'
'fileTypes': ['kfg','spellbook']
'patterns': [
	{
		# meta-Tag
		# get it from regular tag
		'match': '^(\\[\\[) *([^ \\[\\]]+)(?: +([a-z-A-Z0-9._/\\*-]+)|( +(?:\\[[^\\[\\]]*\\]|[^\\[\\]])*))? *(\\]\\])\\s*(.*)$'
		'captures':
			'1':
				'name': 'punctuation.definition.tag.meta-tag.kfg'
			'2':
				'name': 'entity.name.tag.meta-tag.kfg'
			'3':
				'name': 'entity.other.attribute-name.label.kfg'
			'4':
				'patterns': [
					{
						'include': '#expression'
					}
				]
			'5':
				'name': 'punctuation.definition.tag.meta-tag.kfg'
			'6':
				'patterns': [
					{
						'include': '#value-definition'
					}
				]
	}
	{
		# whole line
		'match': '^([\\t ]*)(\\S.*)$'
		'name': 'meta.line.kfg'
		'captures':
			# indentation
			'1':
				'name': 'punctuation.whitespace.indentation.kfg'
				'patterns': [
					{
						# incorrect indentation: mixing tabs and spaces
						'match': '\\t+ +[\\t ]+| +\\t+[\\t ]+'
						'name': 'invalid.illegal.whitespace.kfg'
					}
					{
						# incorrect space indentation: not a 4-spaces indentation
						'match': '^(    )*( |  |   )$'
						'name': 'invalid.illegal.whitespace.kfg'
					}
				]

			# line content
			'2':
				'patterns': [
					{
						# comment
						'match': '^#.*$'
						'name': 'comment.line.number-sign.kfg'
					}
					{
						# tag
						#'match': '^(\\[) *([^ \\]]+)(?: +([^ \\]](?:[^\\]]*[^ \\]])?))? *(\\])\\s*(.*)$'
						# attributes v0: (?:\\[[^\\[\\]]*\\]|[^\\[\\]])*
						'match': '^(\\[) *([^ \\[\\]]+)(?: +([a-z-A-Z0-9._/\\*-]+)|( +(?:\\[[^\\[\\]]*\\]|[^\\[\\]])*))? *(\\])\\s*(.*)$'
						'captures':
							'1':
								'name': 'punctuation.definition.tag.kfg'
							'2':
								'name': 'entity.name.tag.kfg'
							'3':
								'name': 'entity.other.attribute-name.label.kfg'
							'4':
								'patterns': [
									{
										'include': '#expression'
									}
								]
							'5':
								'name': 'punctuation.definition.tag.kfg'
							'6':
								'patterns': [
									{
										'include': '#value-definition'
									}
								]
					}
					{
						# unquoted property
						'match': '^([^":](?:[^:]*[^:\\s])?)\\s*(:)\\s*(.*)$'
						'captures':
							'1':
								'name': 'variable.other.property.kfg'
							'2':
								'name': 'punctuation.separator.key-value.kfg'
							'3':
								'patterns': [
									{
										'include': '#after-key'
									}
								]
					}
					{
						# quoted property
						'match': '^(")((?:\\\\.|[^"\\\\])*)(")\\s*(:)\\s*(.*)$'
						'captures':
							'1':
								'name': 'punctuation.string.begin.kfg'
							'2':
								'name': 'variable.other.property.kfg'
								'patterns': [
									{
										'include': '#escape'
									}
								]
							'3':
								'name': 'punctuation.string.end.kfg'
							'4':
								'name': 'punctuation.separator.key-value.kfg'
							'5':
								'patterns': [
									{
										'include': '#after-key'
									}
								]
					}
					{
						# list entry
						'match': '^(-)\\s*(.*)$'
						'captures':
							'1':
								'name': 'punctuation.definition.entry.kfg'
							'2':
								'patterns': [
									{
										'include': '#value-definition'
									}
								]
					}
					{
						# nothing found? this is direct value.
						'include': '#value-definition'
					}
				]

	}
]



'repository':

	'after-key':
		'patterns': [
			{
				'match': '^(?:(\\()([^\\)]*)(\\))\\s*)?(.*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.operator.kfg'
					'2':
						'name': 'entity.name.type.operator.kfg'
					'3':
						'name': 'punctuation.definition.operator.kfg'
					'4':
						'patterns': [
							{
								'include': '#value-definition'
							}
						]
			}
		]

	'value-definition':
		'patterns': [
			{
				'match': '^(?:(<)([a-zA-Z0-9_-]+)(>)\\s*)?(.*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.class.kfg'
					'2':
						'name': 'entity.name.type.class.kfg'
					'3':
						'name': 'punctuation.definition.class.kfg'
					'4':
						'patterns': [
							{
								'include': '#include'
							}
							{
								'include': '#value'
							}
						]
			}
		]

	'include':
		'match': '^(@@?)(.*)$'
		'captures':
			'1':
				'name': 'punctuation.definition.include.kfg'
			'2':
				'name': 'entity.name.include.kfg'

	'value':
		'name': 'meta.value.kfg'
		'patterns': [
			{
				# constants
				'match': '^(null|true|false|on|off|yes|no|NaN|Infinity|-Infinity)\\s*$'
				'captures':
					'1':
						'name': 'constant.language.kfg'
			}
			{
				# numbers
				'match': '^(-?[0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?)\\s*$'
				'captures':
					'1':
						'name': 'constant.numeric.kfg'
			}
			{
				# quoted string
				'match': '^(")((?:\\\\.|[^"\\\\])*)(")\\s*$'
				'captures':
					'1':
						'name': 'punctuation.string.begin.kfg'
					'2':
						'name': 'string.quoted.double.kfg'
						'patterns': [
							{
								'include': '#escape'
							}
						]
					'3':
						'name': 'punctuation.string.end.kfg'
			}
			{
				# quoted template
				'match': '^(\\$\\$?")((?:\\\\.|[^"\\\\])*)(")\\s*$'
				'captures':
					'1':
						'name': 'punctuation.string.begin.interpolated.kfg'
					'2':
						'name': 'string.quoted.double.interpolated.kfg'
						'patterns': [
							{
								'include': '#escape'
							}
						]
					'3':
						'name': 'punctuation.string.end.interpolated.kfg'
			}
			{
				# quoted template element
				'match': '^(\\$\\$?%")((?:\\\\.|[^"\\\\])*)(")\\s*$'
				'captures':
					'1':
						'name': 'punctuation.string.begin.interpolated.kfg'
					'2':
						'name': 'string.quoted.double.interpolated.kfg'
						'patterns': [
							{
								'include': '#escape'
							}
						]
					'3':
						'name': 'punctuation.string.end.interpolated.kfg'
			}
			{
				# introduced string
				'match': '^(>) (.*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.string.introduced.kfg'
					'2':
						'name': 'string.unquoted.introduced.kfg'
			}
			{
				# introduced template
				'match': '^(\\$\\$?>) (.*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.string.introduced.interpolated.kfg'
					'2':
						'name': 'string.unquoted.introduced.interpolated.kfg'
						'patterns': [
							{
								'include': '#style-markup'
							}
							{
								'include': '#template-var'
							}
						]
			}
			{
				# introduced template element
				'match': '^(\\$\\$?%>) (.*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.string.introduced.interpolated.kfg'
					'2':
						'name': 'string.unquoted.introduced.interpolated.kfg'
			}
			{
				# expression
				# do NOT eat the whitespaces
				'match': '^(\\$\\$?=)( .*)$'
				'captures':
					'1':
						'name': 'punctuation.definition.expression.kfg'
					'2':
						'name': 'meta.expression.kfg'
						'patterns': [
							{
								'include': '#expression'
							}
						]
			}
			{
				# ref/variable
				'match': '^(\\$\\$?)([a-zA-Z0-9.\\$\\[\\]_-]*)\\s*$'
				'captures':
					'1':
						'name': 'punctuation.definition.variable.kfg'
					'2':
						'name': 'variable.other.kfg'
			}
			{
				# nothing found? so this is an implicit string
				'match': '^(.*\\S)\\s*$'
				'captures':
					'1':
						'name': 'string.unquoted.kfg'
			}
		]

	'escape':
		'match': '\\\\.'
		'name': 'constant.character.escape.kfg'

	# expression or tag attributes
	'expression':
		#'name': 'entity.other.attribute-name.kfg'
		'patterns': [
			{
				# constants
				'match': ' +(null|true|false|on|off|yes|no|NaN|Infinity|-Infinity)'
				'captures':
					'1':
						'name': 'constant.language.kfg'
			}
			{
				# numbers
				'match': ' +(-?[0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?)'
				'captures':
					'1':
						'name': 'constant.numeric.kfg'
			}
			{
				# quoted string
				'match': ' +(")((?:\\\\.|[^"\\\\])*)(")'
				'captures':
					'1':
						'name': 'punctuation.string.begin.kfg'
					'2':
						'name': 'string.quoted.double.kfg'
						'patterns': [
							{
								'include': '#escape'
							}
						]
					'3':
						'name': 'punctuation.string.end.kfg'
			}
			{
				# ref/variable
				'match': ' +(\\$)([a-zA-Z0-9.\\$\\[\\]_-]*)'
				'captures':
					'1':
						'name': 'punctuation.definition.variable.kfg'
					'2':
						'name': 'variable.other.kfg'
			}
			{
				# expression built-in operator
				'match': ' +(\\(|\\)|,|:|add|\\+|sub|-|mul|\\*|div|/|intdiv|\\\\|modulo|%|\\\\\\\\|%\\+|>|=>|<|<=|=|==|===|!=|!==|not|!|and|or|xor|&&|\\|\\||\\?|\\?\\?\\?|round|floor|ceil|trunc|sign|abs|max|min|pow|\\^|exp|log|log2|log10|sqrt|cos|sin|tan|acos|asin|atan|atan2|hypot|avg|array|concat|is-set\\?|is-boolean\\?|is-number\\?|is-string\\?|is-array\\?|is-object\\?|is-real\\?|is-empty\\?|has|->|=>)(?= |\\]|$)'
				'captures':
					'1':
						'name': 'keyword.operator.kfg'
			}
			{
				# expression operator
				# WTF? this stupid regexp engine don't understand [^\]]
				# 'match': ' +([^ $\\[\\]]+)'
				# ... so I have to white-list instead of black-list... :/
				'match': ' +([a-z-A-Z0-9=<>().:,?!&|\\\\/*%^+-]+)'
				'captures':
					'1':
						'name': 'entity.name.function.kfg'
			}
			{
				# spaces
				'match': ' +'
				'name': 'entity.other.attribute-name.kfg'
			}
		]

	# variable inside template
	'template-var':
		'match': '(\\$\\{)([^\\}/]+)(//[^\\}]*)?(\\})(?:(\\[)([^\\]]+)(\\]))?'
		'captures':
			'1':
				'name': 'punctuation.section.embedded.kfg'
			'2':
				'name': 'variable.other.embedded.kfg'
			'3':
				'name': 'entity.name.type.operator.embedded.kfg'
			'4':
				'name': 'punctuation.section.embedded.kfg'
			'5':
				'name': 'punctuation.section.embedded.kfg'
			'6':
				'name': 'entity.name.type.operator.embedded.kfg'
			'7':
				'name': 'punctuation.section.embedded.kfg'

	# style markup inside template
	'style-markup':
		'match': '\\^(.)'
		'name': 'markup.kfg'
		'captures':
			'1':
				'patterns': [
					{
						'match': 'k'
						'name': 'markup.black.kfg'
					}
					{
						'match': 'K'
						'name': 'markup.dark-gray.kfg'
					}
					{
						'match': 'w'
						'name': 'markup.white.kfg'
					}
					{
						'match': 'W'
						'name': 'markup.light-white.kfg'
					}
					{
						'match': 'r'
						'name': 'markup.red.kfg'
					}
					{
						'match': 'R'
						'name': 'markup.light-red.kfg'
					}
					{
						'match': 'g'
						'name': 'markup.green.kfg'
					}
					{
						'match': 'G'
						'name': 'markup.light-green.kfg'
					}
					{
						'match': 'y'
						'name': 'markup.yellow.kfg'
					}

					{
						'match': 'Y'
						'name': 'markup.light-yellow.kfg'
					}

					{
						'match': 'b'
						'name': 'markup.blue.kfg'
					}
					{
						'match': 'B'
						'name': 'markup.light-blue.kfg'
					}
					{
						'match': 'm'
						'name': 'markup.violet.kfg'
					}
					{
						'match': 'M'
						'name': 'markup.light-violet.kfg'
					}
					{
						'match': 'c'
						'name': 'markup.cyan.kfg'
					}
					{
						'match': 'C'
						'name': 'markup.light-cyan.kfg'
					}
					{
						'match': '/'
						'name': 'markup.italic.kfg'
					}
					{
						'match': '\\+'
						'name': 'markup.bold.kfg'
					}
					{
						'match': '-'
						'name': 'markup.dim.kfg'
					}
					{
						'match': '_'
						'name': 'markup.underline.kfg'
					}
				]
