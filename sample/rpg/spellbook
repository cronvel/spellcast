
[[doctype adventurer]]

[action drink]
	[message]
		$> You drink a cup of vine...

[entity-model player]
	class: character
	label: the hero
	stats:
		fighting: 16
		strength: 12
	status:
		hp: 20
		xp: 0

[entity-model guardian]
	class: character
	label: the guardian
	stats:
		xpReward: 10
		fighting: 14
		strength: 16
	status:
		hp: 20

[role hero]
	[label] You
	[entity] player



[chapter intro]
	[scene first-encounter]
		[message]
			$> You are walking alongside a dangerous cliff.
			$> Suddenly, big and tough guy appears.
			$> He does not say much except grumbling something like “I'm the guardian” and start rushing you with a giant club.
		
		[template $local.deadlyPushFlavour]
			$> ^R${args.attacker.label//uc1} pushes ${args.defender.label} and ${args.defender.label} falls off the cliff!
		
		[subscene battle/init]
			[args]
				foes:
					- guardian
				deadlyPush:
					bonus: 0
					flavour: $local.deadlyPushFlavour
		
		[next second-encounter]

	[scene second-encounter]
		[message]
			$> You are moving slowly on a wooden beam, over a chasm.
			$> You find it really difficult to walk without falling, yet, another guardian appears at the other end of the beam.
			$> Instead of waiting for you, he starts walking on the beam toward you.
			$> He swings the air with its giant club as he taunt you, inviting you to go ahead fighting him.
		
		[template $local.deadlyPushFlavour]
			$> ^RAs ${args.attacker.label} charges, ${args.defender.label} slips from the wooden beam!
			$> ${args.defender.label//uc1} falls into the chasm!
		
		[subscene battle/init]
			[args]
				foes:
					- guardian
				deadlyPush:
					bonus: 6
					flavour: $local.deadlyPushFlavour



[chapter battle]
	
	[scene init]
		#[message] $> Hello ${roles.hero.entity.label}
		[set $this.hero] $roles.hero.entity
		[create-entity $this.enemy] $args.foes[0]
		[set $this.hero.status.cooldown] 0
		[set $this.enemy.status.cooldown] 0
		[set $this.deadlyPush] $args.deadlyPush
		[next initiative]
	
	
	
	[scene initiative]
		[set $this.heroScore] $= $this.hero.stats.fighting + ( 2 D 8 )
		[set $this.enemyScore] $= $this.enemy.stats.fighting + ( 2 D 8 )
		
		[if $this.heroScore >= $this.enemyScore]
			[message] $> ${this.hero.label//uc1} takes the initiative.
			[set $this.heroTurn] true
		[else]
			[message] $> ${this.enemy.label//uc1} takes the initiative.
			[set $this.heroTurn] false
		
		[goto new-turn]
		
	
	
	[scene new-turn]
		[if $this.heroTurn]
			[set $this.heroTurn] false
			[goto hero-turn]
		[else]
			[set $this.heroTurn] true
			[goto enemy-turn]
	
	
	
	[scene end-turn]
		[if $this.hero.status.hp <= 0]
			[goto lost]
		[elseif $this.enemy.status.hp <= 0]
			[goto win]
		[goto new-turn]
	
	
	
	[scene hero-turn]
		[if $this.hero.status.cooldown > 0]
			[set $this.hero.status.cooldown] $= $this.hero.status.cooldown - 1
			[goto end-turn]
		
		[next hero-melee]
			[label] Attack.
	
		[next hero-charge]
			[label] Charge!
	
	
	
	[scene hero-melee]
		[subscene melee]
			[args]
				attacker: $this.hero
				defender: $this.enemy
		[goto end-turn]
	
	
	
	[scene hero-charge]
		[subscene charge]
			[args]
				attacker: $this.hero
				defender: $this.enemy
		[goto end-turn]
	
	
	
	[scene enemy-turn]
		[subscene melee]
			[args]
				attacker: $this.enemy
				defender: $this.hero
		[goto end-turn]
	
	
	
	[scene win]
		[message] $> ${this.hero.label//uc1} win the battle.
		[set $this.hero.status.xp] $= $this.hero.status.xp + $this.enemy.stats.xpReward
		[message] $> You gain ${this.enemy.stats.xpReward} xp (=${this.hero.status.xp}).
	
	
	
	[scene lost]
		[message] $> ${this.hero.label//uc1} died on the battlefield.
		[lost]

	
	
	[scene deal-damages]
		[set $this.damages] $= random ( $args.attacker.stats.strength / 4 ) ( $args.attacker.stats.strength / 2 )
		[if $args.bonus]
			[set $args.damages] $= $this.damages + $args.bonus
		[set $args.defender.status.hp] $= $args.defender.status.hp - $this.damages
			
	
	
	[scene melee]
		[set $this.attackScore] $= $args.attacker.stats.fighting + ( 2 D 8 )
		[set $this.defenseScore] $= $args.defender.stats.fighting + ( 2 D 8 )
		
		[if $this.attackScore > $this.defenseScore]
			#[message] $> ${this.hero.stats.damageBase} + ${this.hero.stats.damageDice} D ${this.hero.stats.damageFaces}
			[subscene deal-damages]
				[args]
					attacker: $args.attacker
					defender: $args.defender
			
			[if $args.defender.npc]
				[message] $> ^y${args.attacker.label//uc1} hits ${args.defender.label} for ${this.damages} hp.
			[else]
				[message] $> ^R${args.attacker.label//uc1} hits ${args.defender.label} for ${this.damages} hp.
			
			[if $args.defender.status.hp <= 0]
				[message] $> ${args.defender.label//uc1} is dead.
		[else]
			[fortune]
				- $> ${args.attacker.label//uc1} misses ${args.defender.label}.
				- $> ${args.defender.label//uc1} blocks ${args.attacker.label}.
				- $> ${args.defender.label//uc1} avoids ${args.attacker.label}.
	
	
	
	[scene charge]
		[set $args.attacker.status.cooldown] 1
		[set $this.attackScore] $= ( $args.attacker.stats.fighting + 2 ) + ( 2 D 8 )
		[set $this.defenseScore] $= $args.defender.stats.fighting + ( 2 D 8 )
		#[message] $> Scores: ${this.attackScore} vs ${this.defenseScore}
		
		[if $this.attackScore > $this.defenseScore]
			#[message] $> ${this.hero.stats.damageBase} + ${this.hero.stats.damageDice} D ${this.hero.stats.damageFaces}
			[subscene deal-damages]
				[args]
					attacker: $args.attacker
					defender: $args.defender
					bonus: 2
			
			[if $args.defender.npc]
				[message] $> ^y${args.attacker.label//uc1} hits ${args.defender.label} for ${this.damages} hp.
			[else]
				[message] $> ^R${args.attacker.label//uc1} hits ${args.defender.label} for ${this.damages} hp.
			
			[set $args.defender.status.hp] $= $args.defender.status.hp - $this.damages
			[if $args.defender.status.hp <= 0]
				[message] $> ${args.defender.label//uc1} is dead.
			[if $this.deadlyPush]
				[subscene deadly-push]
					[args] $args
		[elseif ( $this.attackScore = $this.defenseScore ) && $this.deadlyPush]
			[message] $> ${args.defender.label//uc1} blocks ${args.attacker.label}.
			[subscene deadly-push]
				[args] $args
		[else]
			[fortune]
				- $> ${args.attacker.label//uc1} misses ${args.defender.label}.
				- $> ${args.defender.label//uc1} blocks ${args.attacker.label}.
				- $> ${args.defender.label//uc1} avoids ${args.attacker.label}.
		
	
	
	[scene deadly-push]
		[set $this.attackScore] $= ( $args.attacker.stats.strength + $this.deadlyPush.bonus ) + ( 2 D 6 )
		[set $this.defenseScore] $= $args.defender.stats.strength + ( 2 D 6 )
		
		[if $this.attackScore > $this.defenseScore]
			[set $args.defender.status.hp] 0
			[set $this.victim] $args.defender.label
			[apply-to $flavour] $this.deadlyPush.flavour
			[message] $flavour
		
		
	
	
