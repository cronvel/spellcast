
[[doctype spellcast/book]]

[module] @@{core}/utils.kfg
[module] @@{rpg}/characters/common-characters.kfg

[module] @@interpreter.kfg


[item-model coin]
	class: object
	name: coin
	description: A coin.
	params:
		examine-flavor: A silver coin.



[create-main-entity]
	class: character
	name: the hero
	slots:
		hand: 2



[here-actions]
	[call input/input]



[system input]
	
	[fn input]
		
		[define $state]
			input: ""
		[message] > input:
		[input $state.input]
		[request bot => $reply] $state
		[message] $> reply: ${reply}
		[debug] $reply



[chapter game]
	
	[scene info]
		#[message] > Use with --script-debug
		[goto loop]

	[scene loop]
		[input $input]
		[request command-interpreter => $reply] $input
		[debug] $reply
		[message] $> Command: ${reply.command}, target: ${reply.target}
		[goto loop]




[create-main-sandbox]
	[place garden]
		ways:
			-	to: fountain
				label: to the fountain (south)
				# if present, 'from' indicate continuation from that direction,
				# here if we are going from the hall, we can continue to the fountain.
				from: hall
			-	to: hall
				label: to the hall (north)
				from: fountain
				door:
					name: metallic door
			-	to: chapel
				label: to the chapel (east)
				door:
					name: wood door
	
	[place chapel] <Object>
		# no need to define ways, there is only one way out: to the garden,
		# and a bi-directional passage through a wood door was created by the garden itself
	
	[action unlock]
		[require]
			- performer
			- target
		[optional]
			- using
		
		[check]
			[if $target.lock = false]
				[message] $> ${target.name} is not locked.
				[return] false
			
			[if $target.key != $using]
				[message] $> ${using.name} can't unlock ${target.name}.
				[return] false

		[effect]
			[set $target.lock] false
		
		[report]
			[message] $> ${performer.name} unlocks ${target.name}.

	# like [action][check]
	[check-action kiss when ( $performer = $player ) and ( $target.name = "Sofia" )]
		[success]
	
	[check-action kiss when $target.params.is-human]
		[failure]

[chapter wanted-api]

	[scene wanted-api]
		[perform $reply.command]
		
		[perform unlock]
			performer: $player
			target: $door
		
	[scene wanted-sandbox-api]
		[sandbox]





[item-model water]
	class: object
	name: water
	status:
		quantity: 2


[chapter test]

	[starting-scene test]
		[create-item $item] water
		
		[create-entity $sofia]
			model: human
			name: Sofia

		[action drink]
			[require]
				- commander
				- performer
				- object

			[check persuasion]
				[message] $> Persuasion check #1
				#[maybe-success]

			[check]
				[message] $> Check #1
				[if $args.object.status.quantity <= 0]
					[failure-report prevent-default]
						[message] $> ^YThere is no ${args.object.name} anymore...
					[failure]
				[maybe-success]
			
			[effect]
				[dec $args.object.status.quantity]
				[message] $> ^geffect tag
			
			[persuasion-failure-report]
				[message] $> ^YNobody should tell ${args.performer.name} when to drink.
			[persuasion-success-report]
				[message] $> ^B${args.performer.name//uc1} nods.
			[success-report]
				[message] $> ^B${args.performer.name//uc1} drinks ${args.object.name}.
			[failure-report]
				[message] $> ^Y${args.object.name//uc1} is not drinkable!
		
		[on $player persuasion:*:commander]
			[message] $> persuasion:*:commander player
		
		[on $player persuasion:drink:commander]
			[message] $> persuasion:drink:commander player
		
		[on $player persuasion:drink:performer]
			[message] $> persuasion:drink:performer player
		
		[on $sofia persuasion:drink:performer]
			[message] $> persuasion:drink:performer sofia
			#[maybe-success]
		
		[on $sofia persuasion:*:performer]
			[message] $> persuasion:*:performer sofia
			#[persuasion-failure-report]
			[persuasion-failure-report reset-default]
				[message] $> ^Y${args.performer.name//uc1} is a liberated woman, she refuses to be commanded.
			[maybe-failure]
			#[failure]
		
		[on <low> action:drink]
			[message] $> action:drink <low>
		
		[on action:drink]
			[message] $> action:drink
		
		[on $player action:drink:performer]
			[message] $> action:drink:performer player
		
		[on $player action:*:performer]
			[message] $> action:*:performer player
		
		[on $item action:drink:object]
			[message] $> action:drink:object item
		
		[perform drink]
			commander: $player
			performer: $sofia
			object: $item

		[perform drink]
			commander: $player
			performer: $player
			object: $item

		[perform drink]
			commander: $player
			performer: $player
			object: $item

		[perform drink]
			commander: $player
			performer: $player
			object: $item

