
[[doctype spellcast/book]]
[[locale en]]

[module] @@{core}/utils.kfg
[module] @@{rpg}/characters/common-characters.kfg

[module] @@interpreter.kfg



[create-main-entity]
	class: character
	name: <Atom> hero[a:d]
	slots:
		hand: 2



[here-actions]
	[call input/input]



[system input]
	
	[fn input]
		
		[define $state]
			input: ""
		[message] > input:
		[input $state.input]
		[request bot => $reply] $state
		[message] $> reply: ${reply}
		[debug] $reply



[chapter game]
	
	[scene info]
		#[message] > Use with --script-debug
		[goto loop]

	[scene loop]
		[input $input]
		[request command-interpreter => $reply] $input
		[debug] $reply
		[message] $> Command: ${reply.command}, target: ${reply.target}
		[goto loop]




[create-main-sandbox]
	[place garden]
		ways:
			-	to: fountain
				label: to the fountain (south)
				# if present, 'from' indicate continuation from that direction,
				# here if we are going from the hall, we can continue to the fountain.
				from: hall
			-	to: hall
				label: to the hall (north)
				from: fountain
				door:
					name: metallic door
			-	to: chapel
				label: to the chapel (east)
				door:
					name: wood door
	
	[place chapel] <Object>
		# no need to define ways, there is only one way out: to the garden,
		# and a bi-directional passage through a wood door was created by the garden itself
	
	[action unlock]
		[require]
			- performer
			- target
		[optional]
			- using
		
		[check]
			[if $target.lock = false]
				[message] $> ${target.name} is not locked.
				[return] false
			
			[if $target.key != $using]
				[message] $> ${using.name} can't unlock ${target.name}.
				[return] false

		[effect]
			[set $target.lock] false
		
		[report]
			[message] $> ${performer.name} unlocks ${target.name}.

	# like [action][check]
	[check-action kiss when ( $performer = $player ) and ( $target.name = "Sofia" )]
		[success]
	
	[check-action kiss when $target.params.is-human]
		[failure]

[chapter wanted-api]

	[scene wanted-api]
		[perform $reply.command]
		
		[perform unlock]
			performer: $player
			target: $door
		
	[scene wanted-sandbox-api]
		[sandbox]




[item-model water]
	class: object
	name: <Atom> water[a:z]
	status:
		quantity: 2
	params:
		drinkable: yes

[item-model tea]
	class: object
	name: <Atom> tea[a:p]
	status:
		quantity: 1
	params:
		drinkable: yes

[item-model chest]
	class: object
	name: <Atom> chest[a:d]
	params:
		openable: yes

#[create-item $item] water

[create-entity $sofia]
	model: human
	name: <Atom> Sofia[a:P/g:f]

[create-place room]
	name: room
	items:
		- water
		- tea
		- chest
	entities:
		- $sofia

[action drink]
	[require]
		- commander
		- performer
		- object

	# [check] is an alias of [check precondition]
	[check]
		[message] $> Precondition check #1
		[if ! $args.object.params.drinkable]
			[precondition-failure-report prevent-default]
				[message] $> ^Y${args.object.name}[+d:a//uc1] is not drinkable!
			[failure]
		[if $args.object.status.quantity <= 0]
			[precondition-failure-report prevent-default]
				[message] $> ^YThere is ${args.object.name}[+d:a/n:0] anymore...
			[failure]
		[maybe-success]
	
	[check persuasion]
		[message] $> Persuasion check #1
		#[maybe-success]

	[effect]
		[dec $args.object.status.quantity]
		[message] $> ^geffect tag
	
	#[precondition-success-report]
	#	[message] $> ^B${args.performer.name}[+d:a//uc1] drinks ${args.object.name}.
	[precondition-failure-report]
		[message] $> ^Y${args.performer.name}[+d:a//uc1] can't drink ${args.object.name}[+d:a].
	
	[persuasion-failure-report]
		[message] $> ^YNobody should tell ${args.performer.name}[+d:a//uc1] when to drink.
	[persuasion-success-report]
		[message] $> ^B${args.performer.name}[+d:a//uc1] nods.
	[success-report]
		[message] $> ^B${args.performer.name}[+d:a//uc1] drinks ${args.object.name}[+d:a].
	[failure-report]
		[message] $> ^Y${args.object.name}[+d:a//uc1] is not drinkable!


[action open]
	[require]
		- commander
		- performer
		- object

	[check]
		[message] $> Precondition check #1
		[if ! $args.object.params.openable]
			[precondition-failure-report prevent-default]
				[message] $> ^Y${args.object.name}[+d:a//uc1] is not openable!
			[failure]
		[if $args.object.status.open]
			[precondition-failure-report prevent-default]
				[message] $> ^Y${args.object.name}[+d:a//uc1] is already opened!
			[failure]
		[maybe-success]
	
	[effect]
		[set $args.object.status.open] true
	
	[precondition-failure-report]
		[message] $> ^Y${args.performer.name}[+d:a//uc1] can't open ${args.object.name}[+d:a].
	
	#[persuasion-failure-report]
	#	[message] $> ^YNobody should tell ${args.performer.name}[+d:a] when to drink.
	#[persuasion-success-report]
	#	[message] $> ^B${args.performer.name}[+d:a//uc1] nods.
	[success-report]
		[message] $> ^B${args.performer.name}[+d:a//uc1] opens ${args.object.name}[+d:a].
	[failure-report]
		[message] $> ^B${args.performer.name}[+d:a//uc1] can't open ${args.object.name}[+d:a].

[on $player persuasion:*:commander]
	[message] $> persuasion:*:commander player

[on $player persuasion:drink:commander]
	[message] $> persuasion:drink:commander player

[on $player persuasion:drink:performer]
	[message] $> persuasion:drink:performer player

[on $sofia persuasion:drink:performer]
	[message] $> persuasion:drink:performer sofia
	#[maybe-success]

[on $sofia persuasion:*:performer]
	[message] $> persuasion:*:performer sofia
	#[persuasion-failure-report]
	[persuasion-failure-report reset-default]
		[message] $> ^Y${args.performer.name}[+d:a//uc1] is a liberated woman, she refuses to be commanded.
	[maybe-failure]
	#[maybe-success]
	#[failure]

[on <low> precondition:drink]
	[message] $> precondition:drink <low>

[on precondition:drink]
	[message] $> precondition:drink

[on <low> action:drink]
	[message] $> action:drink <low>

[on action:drink]
	[message] $> action:drink

[on $player precondition:drink:performer]
	[message] $> precondition:drink:performer player

[on $player precondition:*:performer]
	[message] $> precondition:*:performer player

[on $player action:drink:performer]
	[message] $> action:drink:performer player

[on $player action:*:performer]
	[message] $> action:*:performer player

[on $item precondition:drink:object]
	[message] $> precondition:drink:object item

[on $item action:drink:object]
	[message] $> action:drink:object item

[on command:id-not-found]
	[message] $> There is no "${args.id}" here...


[chapter test]

	[scene test]
		[perform drink]
			commander: $player
			performer: $sofia
			object: $item

		[perform drink]
			commander: $player
			performer: $player
			object: $item

		[perform]
			action: drink
			commander: $player
			performer: $player
			object: $item

		[perform drink]
			commander: $player
			performer: $player
			object: $item

	[starting-scene test2]
		[place room]
		#[debug hdebug] $place
		
		[define $state] <Object>
		[input $state.input]
			history: yes
		[request command-interpreter => $reply] $state
		
		[set $reply.commander] $player
		[if ! $reply.performer]
			[set $reply.performer] $player
		
		#[debug hdebug] $reply
		
		[perform-command] $reply
		
		[goto test2]
		#[next test2]

	[scene test3]
		[place room]
		[debug hdebug] $place

