
[[doctype spellcast/book]]

[module] @@{core}/utils.kfg
#[module] @@{rpg}/system/inventory.kfg

[module] @@interpreter.kfg


[item-model coin]
	class: object
	name: coin
	description: A coin.
	params:
		examine-flavor: A silver coin.



[create-main-entity]
	class: character
	name: the hero
	slots:
		hand: 2



[here-actions]
	[call input/input]



[system input]
	
	[fn input]
		
		[define $state]
			input: ""
		[message] > input:
		[input $state.input]
		[request bot => $reply] $state
		[message] $> reply: ${reply}
		[debug] $reply



[chapter game]
	
	[scene info]
		#[message] > Use with --script-debug
		[goto loop]

	[scene loop]
		[input $input]
		[request command-interpreter => $reply] $input
		[debug] $reply
		[message] $> Command: ${reply.command}, target: ${reply.target}
		[goto loop]




[create-main-sandbox]
	[place garden]
		ways:
			-	to: fountain
				label: to the fountain (south)
				# if present, 'from' indicate continuation from that direction,
				# here if we are going from the hall, we can continue to the fountain.
				from: hall
			-	to: hall
				label: to the hall (north)
				from: fountain
				door:
					name: metallic door
			-	to: chapel
				label: to the chapel (east)
				door:
					name: wood door
	
	[place chapel]
		# no need to define ways, there is only one way out: to the garden,
		# and a bi-directional passage through a wood door was created by the garden itself
	
	[action unlock]
		[require]
			- performer
			- target
		[optional]
			- using
		
		[check]
			[if $target.lock = false]
				[message] $> ${target.name} is not locked.
				[return] false
			
			[if $target.key != $using]
				[message] $> ${using.name} can't unlock ${target.name}.
				[return] false

		[effect]
			[set $target.lock] false
		
		[report]
			[message] $> ${performer.name} unlocks ${target.name}.

	# like [action][check]
	[check-action kiss when ( $performer = $player ) and ( $target.name = "Sofia" )]
		[success]
	
	[check-action kiss when $target.params.is-human]
		[failure]

[chapter wanted-api]

	[scene wanted-api]
		[perform $reply.command]
		
		[perform unlock]
			performer: $player
			target: $door
		
	[scene wanted-sandbox-api]
		[sandbox]





[item-model water]
	class: object
	name: water
	status:
		quantity: 2


[chapter test]

	[starting-scene test]
		[create-item $item] water
		
		[action drink]
			[check]
				[message] $> Check #1
			[check]
				[message] $> Check #2
			[check <low>]
				[message] $> Check #3
			
			[require]
				- commander
				- performer
				- using
			[effect]
				[message] $> ${args.performer.name//uc1} drinks ${args.using.name}.
		
		[on action:drink]
			[if $args.using.status.quantity <= 0]
				[message] $> Hey ${args.performer.name}! There is no more ${args.using.name}!
				[failure]
			[dec $args.using.status.quantity]
			[maybe-success]

		[on <low> action:drink]
			[message] $> LOL
		
		[on $player performer:drink]
			[message] $> performer:drink
		
		[on $item using:drink]
			[message] $> using:drink
		
		[perform drink]
			commander: $player
			performer: $player
			using: $item

		[perform drink]
			commander: $player
			performer: $player
			using: $item

		[perform drink]
			commander: $player
			performer: $player
			using: $item

